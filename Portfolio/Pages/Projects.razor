@page "/projects"
@inject IStringLocalizer<Localization.Projects> Loc
@inject Services.ProjectService _projectService

<PageTitle>Projects</PageTitle>

<MudPaper Width="100%" Elevation="0">
<MudContainer>

@if (projects == null)
{
    <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7"/>
}
else
{
<MudTabs Elevation="4" Rounded="true" Centered="true" Position="Position.Top">
    
    <MudTabPanel Text="Angular" BadgeColor="Color.Secondary">
        <MudCarousel Class="mt-4 overflow-visible overflow-x-hidden " Style="min-height: 800px" ShowArrows="true" AutoCycle="false" TData="object" BulletsPosition="Position.Top">
            @if(angularProjects is not null)
            @foreach(var project in angularProjects)
            {
                <MudCarouselItem Transition="Transition.Slide">           
                    <ProjectCard project="project"></ProjectCard>
                </MudCarouselItem>
            }
        </MudCarousel>
    </MudTabPanel>

    <MudTabPanel Text="MVC" BadgeColor="Color.Secondary">
        <MudCarousel Class="mt-4 overflow-scroll" Style="min-height: 800px" ShowArrows="true" AutoCycle="false" TData="object">
            @if(mvcProjects is not null)
            @foreach(var project in mvcProjects)
            {
                <MudCarouselItem Transition="Transition.Slide">
                        <ProjectCard project="project"></ProjectCard>
                </MudCarouselItem>
            }
        </MudCarousel>
    </MudTabPanel>

    <MudTabPanel Text="Blazor" BadgeColor="Color.Secondary">
        <MudCarousel Class="mt-4" Style="min-height: 800px" ShowArrows="true" AutoCycle="false" TData="object">
            @if(blazorProjects is not null)
            @foreach(var project in blazorProjects)
            {
                <MudCarouselItem Transition="Transition.Slide">
                        <ProjectCard project="project"></ProjectCard>
                </MudCarouselItem>
            }
        </MudCarousel>
    </MudTabPanel>

    <MudTabPanel Text="React" BadgeColor="Color.Secondary">
        <MudCarousel Class="mt-4" Style="min-height: 800px" ShowArrows="true" AutoCycle="false" TData="object">
            @if(reactProjects is not null)
            @foreach(var project in reactProjects)
            {
                <MudCarouselItem Transition="Transition.Slide">
                        <ProjectCard project="project"></ProjectCard>
                </MudCarouselItem>
            }
        </MudCarousel>
    </MudTabPanel>

    <MudTabPanel Text="@Loc["Console"]" BadgeColor="Color.Secondary">
        <MudCarousel Class="mt-4" Style="min-height: 800px" ShowArrows="true" AutoCycle="false" TData="object">
            @if(consoleProjects is not null)
            @foreach(var project in consoleProjects)
            {
                <MudCarouselItem Transition="Transition.Slide">
                        <ProjectCard project="project"></ProjectCard>
                </MudCarouselItem>
            }
        </MudCarousel>
    </MudTabPanel>
</MudTabs>
}
    </MudContainer>
</MudPaper>


@code {
    private List<Project>? projects;
    private List<Project>? angularProjects;
    private List<Project>? mvcProjects;
    private List<Project>? blazorProjects;
    private List<Project>? reactProjects;
    private List<Project>? consoleProjects;
    private string[] Active = new String[] {"active", "", "", "", "" };
    public int rows = 1;


    protected override async Task OnInitializedAsync()
    {
        var projectsfromJson = await _projectService.GetProjectsAsync();
        if(projectsfromJson is null)
            return;

        angularProjects = projectsfromJson
            .Where( p => p.Framework == "Angular")
            .OrderByDescending( p => p.Id)
            .Select
            ( p => 
                new Project(p, Loc[$"{p.Framework}{p.Id}Name"],Loc[$"{p.Framework}{p.Id}Description"])
            )
            .ToList();
        mvcProjects = projectsfromJson
            .Where( p => p.Framework == "MVC")
            .OrderByDescending( p => p.Id)
            .Select
            ( p => 
                new Project(p, Loc[$"{p.Framework}{p.Id}Name"],Loc[$"{p.Framework}{p.Id}Description"])
            )
            .ToList();
        blazorProjects = projectsfromJson
            .Where( p => p.Framework == "Blazor")
            .OrderByDescending( p => p.Id)
            .Select
            ( p => 
                new Project(p, Loc[$"{p.Framework}{p.Id}Name"],Loc[$"{p.Framework}{p.Id}Description"])
            )
            .ToList();
        reactProjects = projectsfromJson
            .Where( p => p.Framework == "React")
            .OrderByDescending( p => p.Id)
            .Select
            ( p => 
                new Project(p, Loc[$"{p.Framework}{p.Id}Name"],Loc[$"{p.Framework}{p.Id}Description"])
            )
            .ToList();
        consoleProjects = projectsfromJson
            .Where( p => p.Framework == "Console")
            .OrderByDescending( p => p.Id)
            .Select
            ( p => 
                new Project(p, Loc[$"{p.Framework}{p.Id}Name"],Loc[$"{p.Framework}{p.Id}Description"])
            )
            .ToList();
        projects = angularProjects;
        rows = (int) Math.Ceiling((double)(projects?.Count ?? 0)/2);
    }
}
