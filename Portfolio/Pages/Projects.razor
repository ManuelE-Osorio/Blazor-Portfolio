@page "/projects"

@inject Services.ProjectService _projectService

<PageTitle>Projects</PageTitle>




<ul class="nav nav-tabs">
<li class="nav-item">
    <button class="nav-link @Active[0]" @onclick="@(() => SetProject(0))">Angular</button>
</li>
<li class="nav-item">
    <button class="nav-link @Active[1]" @onclick="@(() => SetProject(1))">MVC</button>
</li>
<li class="nav-item">
    <button class="nav-link @Active[2]" @onclick="@(() => SetProject(2))">Blazor</button>
</li>
<li class="nav-item">
    <button class="nav-link @Active[3]" @onclick="@(() => SetProject(3))">React</button>
</li>
<li class="nav-item">
    <button class="nav-link @Active[4]" @onclick="@(() => SetProject(4))">Console</button>
</li>
</ul>

@if (projects == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <div class="container text-center">
        @for(int i = 0; i<rows; i++)
        {
            <div class="row">
                <div class="col p-4">
                    <ProjectCard project="projects[i*2]"></ProjectCard>
                </div>
                <div class="col p-4">
                    @if(projects.Count > i*2+1)
                    {
                        <ProjectCard project="projects[i*2+1]"></ProjectCard>
                    }
                </div>
            </div>
        }
    
    </div>
}

@code {
    private List<Project>? projects;
    private List<Project>? angularProjects;
    private List<Project>? mvcProjects;
    private List<Project>? blazorProjects;
    private List<Project>? reactProjects;
    private List<Project>? consoleProjects;
    private string[] Active = new String[] {"active", "", "", "", "" };
    public int rows = 1;


    protected override async Task OnInitializedAsync()
    {
        projects = await _projectService.GetProjectsAsync();
        if(projects is null)
            return;

        angularProjects = projects.Where( p => p.Framework == "angular").ToList();
        mvcProjects = projects.Where( p => p.Framework == "mvc").ToList();
        blazorProjects = projects.Where( p => p.Framework == "blazor").ToList();
        reactProjects = projects.Where( p => p.Framework == "react").ToList();
        consoleProjects = projects.Where( p => p.Framework == "console").ToList();
        projects = angularProjects;
        rows = (int) Math.Ceiling((double)(projects?.Count ?? 0)/2);
    }

    private void SetProject(int id)
    {
        Active = Active.Select( p => "").ToArray();
        Active[id] = "active";
        switch (id)
        {
            case(0):
                projects = angularProjects;
                break;
            case(1):
                projects = mvcProjects;
                break;
            case(2):
                projects = blazorProjects;
                break;
            case(3):
                projects = reactProjects;
                break;
            case(4):
                projects = consoleProjects;
                break;
        }
        rows = (int) Math.Ceiling((double)(projects?.Count ?? 0)/2);
    }
}
