<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Console" xml:space="preserve">
    <value>Console</value>
    <comment/>
  </data>
  <data name="Angular3Name" xml:space="preserve">
    <value>Sleep Tracker</value>
    <comment/>
  </data>
  <data name="Angular3Description" xml:space="preserve">
    <value>Angular sleep tracking app created with Angular Material and ASP.NET Core WebAPI.</value>
    <comment/>
  </data>
  <data name="Angular2Name" xml:space="preserve">
    <value>Coffee Tracker</value>
    <comment/>
  </data>
  <data name="Angular2Description" xml:space="preserve">
    <value>Angular app to track the users coffee consumption. The app allows its user to: get a list of previous coffe cups logs, display them in a list, edit their details and add navigation between different views. The app was done to build upon the basic fundations of Angular.</value>
    <comment/>
  </data>
  <data name="Angular1Name" xml:space="preserve">
    <value>Tour of Heroes</value>
    <comment/>
  </data>
  <data name="Angular1Description" xml:space="preserve">
    <value>Tour of Heroes Angular tutorial app. The app allows its user to: get a list of heroes, display them in a list, edit their details and add navigation between different views. The app was done as an introduction to the fundamentals of Angular.</value>
    <comment/>
  </data>
  <data name="Blazor1Name" xml:space="preserve">
    <value>Portfolio</value>
    <comment/>
  </data>
  <data name="Blazor1Description" xml:space="preserve">
    <value>Simple portfolio Web App using Blazor and MudBlazor</value>
    <comment/>
  </data>
  <data name="MVC3Name" xml:space="preserve">
    <value>Budget</value>
    <comment/>
  </data>
  <data name="MVC3Description" xml:space="preserve">
    <value>ASP.NET Core MVC budget tracking app. The user is able to perform CRUD operations on transactions and categories. The transactions are linked to the categories as a Many-To-One relationship using Entity Framework. The creation, update and delete operations are performed via modals generated with javascript. The requests are posted using the fetch API.</value>
    <comment/>
  </data>
  <data name="MVC2Name" xml:space="preserve">
    <value>Todo</value>
    <comment/>
  </data>
  <data name="MVC2Description" xml:space="preserve">
    <value>ASP.NET Todo List app using Minimal web API and JavaScript Fetch API. The user is able to create a Todo List via a single page application and perform basic operations on the list.</value>
    <comment/>
  </data>
  <data name="MVC1Name" xml:space="preserve">
    <value>Movies</value>
    <comment/>
  </data>
  <data name="MVC1Description" xml:space="preserve">
    <value>ASP.NET MVC Movies app. The user is able perform CRUD operations on a webpage that stores Movies and TV Shows.</value>
    <comment/>
  </data>
  <data name="Console4Name" xml:space="preserve">
    <value>Drinks</value>
    <comment/>
  </data>
  <data name="Console4Description" xml:space="preserve">
    <value>Application that uses an HTTPRequest to an public API (https://www.thecocktaildb.com/api.php) to get information for a drinks menu.</value>
    <comment/>
  </data>
  <data name="Console3Name" xml:space="preserve">
    <value>Flashcards</value>
    <comment/>
  </data>
  <data name="Console3Description" xml:space="preserve">
    <value>Simple Flashcards game using SQL Server and ADO.NET</value>
    <comment/>
  </data>
  <data name="Console2Name" xml:space="preserve">
    <value>Excel</value>
    <comment/>
  </data>
  <data name="Console2Description" xml:space="preserve">
    <value>This application allows its user to insert an ExcelWorkSheet using the library EPPlus into a database in Sqlserver with EFCore. The template can be generated by the users with some constraints.</value>
    <comment/>
  </data>
  <data name="Console1Name" xml:space="preserve">
    <value>PhoneBook</value>
    <comment/>
  </data>
  <data name="Console1Description" xml:space="preserve">
    <value>Console application allowing the user to create contacts. Developed using C#/.NET, using Entity Framework to query the SQL Server Database.</value>
    <comment/>
  </data>
  <data name="Angular4Name" xml:space="preserve">
    <value>Quiz Game</value>
    <comment/>
  </data>
  <data name="Angular4Description" xml:space="preserve">
    <value>Angular Kahoot-like quiz game with role managment, using ASP.NET as backend and Angular Material components. The app contains three main models: Questions, Quizzes and Games. Each of these ones are related with one-to-one, one-to-many or many-to-many relationships using entity framework. The project uses the repository pattern and ASP.NET identity for authentication.</value>
    <comment/>
  </data>
</root>